// <auto-generated />
using System;
using DataAccess.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(PerfumeryContext))]
    [Migration("20240308150033_PerfumeryDB")]
    partial class PerfumeryDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Concrete.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"), 1L, 1);

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandName = "Hugo Boss",
                            Description = "Hugo Boss Perfume"
                        },
                        new
                        {
                            BrandId = 2,
                            BrandName = "Sephora",
                            Description = "Sephora Perfume"
                        },
                        new
                        {
                            BrandId = 3,
                            BrandName = "Yves Rocher",
                            Description = "Yves Rocher Perfume"
                        },
                        new
                        {
                            BrandId = 4,
                            BrandName = "Nivea",
                            Description = "Nivea Perfume"
                        },
                        new
                        {
                            BrandId = 5,
                            BrandName = "Rebull",
                            Description = "Rebull Perfume"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserDetailId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserDetailId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Concrete.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PerfumeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PerfumeId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Entities.Concrete.Perfume", b =>
                {
                    b.Property<int>("PerfumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerfumeId"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("PerfumeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PerfumeId");

                    b.HasIndex("BrandId");

                    b.ToTable("Perfumes");

                    b.HasData(
                        new
                        {
                            PerfumeId = 1,
                            BrandId = 1,
                            PerfumeName = "White",
                            PhotoPath = "default",
                            Price = 30m
                        },
                        new
                        {
                            PerfumeId = 2,
                            BrandId = 1,
                            PerfumeName = "Blue",
                            PhotoPath = "default",
                            Price = 10m
                        },
                        new
                        {
                            PerfumeId = 3,
                            BrandId = 1,
                            PerfumeName = "Yellow",
                            PhotoPath = "default",
                            Price = 30m
                        },
                        new
                        {
                            PerfumeId = 4,
                            BrandId = 2,
                            PerfumeName = "Black",
                            PhotoPath = "default",
                            Price = 30m
                        },
                        new
                        {
                            PerfumeId = 5,
                            BrandId = 2,
                            PerfumeName = "Blue",
                            PhotoPath = "default",
                            Price = 30m
                        },
                        new
                        {
                            PerfumeId = 6,
                            BrandId = 2,
                            PerfumeName = "Yellow",
                            PhotoPath = "default",
                            Price = 10m
                        },
                        new
                        {
                            PerfumeId = 7,
                            BrandId = 3,
                            PerfumeName = "Black",
                            PhotoPath = "default",
                            Price = 10m
                        },
                        new
                        {
                            PerfumeId = 8,
                            BrandId = 3,
                            PerfumeName = "Yellow",
                            PhotoPath = "default",
                            Price = 30m
                        },
                        new
                        {
                            PerfumeId = 9,
                            BrandId = 3,
                            PerfumeName = "White",
                            PhotoPath = "default",
                            Price = 30m
                        },
                        new
                        {
                            PerfumeId = 10,
                            BrandId = 4,
                            PerfumeName = "Blue",
                            PhotoPath = "default",
                            Price = 20m
                        },
                        new
                        {
                            PerfumeId = 11,
                            BrandId = 4,
                            PerfumeName = "Yellow",
                            PhotoPath = "default",
                            Price = 30m
                        },
                        new
                        {
                            PerfumeId = 12,
                            BrandId = 4,
                            PerfumeName = "White",
                            PhotoPath = "default",
                            Price = 10m
                        },
                        new
                        {
                            PerfumeId = 13,
                            BrandId = 5,
                            PerfumeName = "Blue",
                            PhotoPath = "default",
                            Price = 20m
                        },
                        new
                        {
                            PerfumeId = 14,
                            BrandId = 5,
                            PerfumeName = "Yellow",
                            PhotoPath = "default",
                            Price = 20m
                        },
                        new
                        {
                            PerfumeId = 15,
                            BrandId = 5,
                            PerfumeName = "Black",
                            PhotoPath = "default",
                            Price = 10m
                        });
                });

            modelBuilder.Entity("Entities.Concrete.UserDetail", b =>
                {
                    b.Property<int>("UserDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDetailId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserDetailId");

                    b.ToTable("UserDetails");

                    b.HasData(
                        new
                        {
                            UserDetailId = 1,
                            Address = "Bilecik",
                            Email = "oktayhalitekinay@gmail.com",
                            FirstName = "Oktay",
                            LastName = "Ekinay",
                            Phone = "05432719312",
                            UserName = "oktayhalitekinay"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.HasOne("Entities.Concrete.UserDetail", "UserDetail")
                        .WithMany("Orders")
                        .HasForeignKey("UserDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("Entities.Concrete.OrderDetail", b =>
                {
                    b.HasOne("Entities.Concrete.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Perfume", "Perfume")
                        .WithMany("OrderDetails")
                        .HasForeignKey("PerfumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Perfume");
                });

            modelBuilder.Entity("Entities.Concrete.Perfume", b =>
                {
                    b.HasOne("Entities.Concrete.Brand", "Brand")
                        .WithMany("Perfumes")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Entities.Concrete.Brand", b =>
                {
                    b.Navigation("Perfumes");
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Entities.Concrete.Perfume", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Entities.Concrete.UserDetail", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
